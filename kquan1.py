import hashlib
from collections import Counter
import statistics
import platform
from datetime import datetime
import base64
import urllib.parse
import requests
import random
import string
import math
import json
import os
import random
import requests
import time
from colorama import Fore, Style, init
init(autoreset=True)

NV={
    1:'B·∫≠c th·∫ßy t·∫•n c√¥ng',
    2:'Quy·ªÅn s·∫Øt',
    3:'Th·ª£ l·∫∑n s√¢u',
    4:'C∆°n l·ªëc s√¢n c·ªè',
    5:'Hi·∫øp sƒ© phi nhanh',
    6:'Vua home run'
}

def clear_screen():
    os.system('cls' if platform.system() == "Windows" else 'clear')

def prints(r, g, b, text="text", end="\n"):
    print(f"\033[38;2;{r};{g};{b}m{text}\033[0m", end=end)

def banner(game):
    banner="""
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó
 ‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïî‚ïù
    ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù
    ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ñà‚ñà‚ïó
    ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïó
    ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù
    """
    for i in banner.split('\n'):
        x,y,z=200,255,255
        for j in range(len(i)):
            prints(x,y,z,i[j],end='')
            x-=4
            time.sleep(0.001)
        print()
    prints(247, 255, 97,"‚ú®" + "‚ïê" * 45 + "‚ú®")
    prints(32, 230, 151,f"üåü XWORLD - {game} ALQQV1 (QUANQUANV1) üåü".center(45))
    prints(247, 255, 97,"‚ïê" * 47)
    prints(7, 205, 240,"Telegram: @tankeko12")
    prints(7, 205, 240,"Nh√≥m Zalo: https://zalo.me/g/ddxsyp497")
    prints(7, 205, 240,"Admin: DUONG PHUNG")
    prints(247, 255, 97,"‚ïê" * 47)

def load_data_cdtd():
    if os.path.exists('data-xw-cdtd.txt'):
        prints(0, 255, 243,'B·∫°n c√≥ mu·ªën s·ª≠ d·ª•ng th√¥ng tin ƒë√£ l∆∞u hay kh√¥ng? (y/n): ',end='')
        x=input()
        if x.lower()=='y':
            with open('data-xw-cdtd.txt','r',encoding='utf-8') as f:
                return json.load(f)
        prints(247, 255, 97,"‚ïê" * 47)
    str_guide="""
    H∆∞·ªõng d·∫´n l·∫•y link:
    1. Truy c·∫≠p v√†o trang web xworld.io
    2. ƒêƒÉng nh·∫≠p t√†i kho·∫£n c·ªßa b·∫°n
    3. T√¨m v√† nh·∫•n v√†o "Ch·∫°y ƒëua t·ªëc ƒë·ªô"
    4. Nh·∫•n "L·∫≠p t·ª©c truy c·∫≠p"
    5. Copy link trang web ƒë√≥ v√† d√°n v√†o ƒë√¢y
"""
    prints(218, 255, 125,str_guide)
    prints(247, 255, 97,"‚ïê" * 47)
    prints(125, 255, 168,'üìã Nh·∫≠p link c·ªßa b·∫°n:',end=' ')
    link=input()
    user_id=link.split('&')[0].split('?userId=')[1]
    user_secretkey=link.split('&')[1].split('secretKey=')[1]
    prints(218, 255, 125,f'    User ID c·ªßa b·∫°n l√† {user_id}')
    prints(218, 255, 125,f'    User Secret Key c·ªßa b·∫°n l√† {user_secretkey}')
    json_data={
        'user-id':user_id,
        'user-secret-key':user_secretkey,
    }
    with open('data-xw-cdtd.txt','w+',encoding='utf-8') as f:
        json.dump(json_data, f, indent=4, ensure_ascii=False)
    return json_data

def load_config_cdtd():
    if os.path.exists('config_cdtd_ctool.txt'):
        prints(0, 255, 243,'B·∫°n c√≥ mu·ªën s·ª≠ d·ª•ng c·∫•u h√¨nh ƒë√£ l∆∞u hay kh√¥ng? (y/n) ',end='')
        x=input()
        if x.lower()=='y':
            with open('config_cdtd_ctool.txt','r',encoding='utf-8') as f:
                return json.load(f)
    
    str_coin_type="""
Nh·∫≠p lo·∫°i ti·ªÅn m√† b·∫°n mu·ªën ch∆°i:
    1. USDT
    2. BUILD
    3. WORLD
"""
    prints(219, 237, 138,str_coin_type)
    while True:
        prints(125, 255, 168,'Nh·∫≠p lo·∫°i ti·ªÅn b·∫°n mu·ªën ch∆°i (1/2/3):',end=' ')
        x=input()
        if x in ['1', '2', '3']:
            Coin = {'1': 'USDT', '2': 'BUILD', '3': 'WORLD'}[x]
            break
        else:
            prints(247, 30, 30, 'Nh·∫≠p sai, vui l√≤ng nh·∫≠p l·∫°i ...', end='\r')
    
    prints(255, 13, 69,'VUI L√íNG C√ÄI ƒê·∫∂T C√ÅC THAM S·ªê CHO TOOL:')
    
    coins = float(input(f'    Nh·∫≠p s·ªë {Coin} b·∫°n mu·ªën ƒë·∫∑t cho M·ªñI NH√ÇN V·∫¨T: '))
    take_profit = float(input(f'    Ch·ªët l·ªùi khi ƒë·∫°t ƒë∆∞·ª£c bao nhi√™u {Coin} (nh·∫≠p 0 ƒë·ªÉ b·ªè qua): '))
    stop_loss = float(input(f'    C·∫Øt l·ªó khi thua bao nhi√™u {Coin} (nh·∫≠p 0 ƒë·ªÉ b·ªè qua): '))
    consecutive_loss_stop = int(input('    D·ª´ng tool sau bao nhi√™u v√°n thua li√™n ti·∫øp (nh·∫≠p 0 ƒë·ªÉ b·ªè qua): '))
    
    # New questions for loss multiplication
    prints(255, 165, 0, 'C√ÄI ƒê·∫∂T G·∫§P TH·∫æP KHI THUA:')
    use_multiplier = input('    B·∫°n c√≥ mu·ªën nh√¢n ti·ªÅn c∆∞·ª£c sau khi thua kh√¥ng? (y/n): ').lower() == 'y'
    loss_multiplier = 1.0
    if use_multiplier:
        loss_multiplier = float(input('    Nh√¢n bao nhi√™u l·∫ßn sau m·ªói l·∫ßn thua? (v√≠ d·ª•: 2): '))

    games_to_play = int(input('    Ch∆°i bao nhi√™u v√°n th√¨ ngh·ªâ (nh·∫≠p 0 ƒë·ªÉ ch∆°i li√™n t·ª•c): '))
    games_to_rest = 0
    if games_to_play > 0:
        games_to_rest = int(input('    Ngh·ªâ bao nhi√™u v√°n r·ªìi ch∆°i ti·∫øp: '))

    config={
        'Coin': Coin,
        'initial_coins': coins,
        'current_coins': coins,
        'take_profit': take_profit if take_profit > 0 else 99999999,
        'stop_loss': stop_loss if stop_loss > 0 else 99999999,
        'consecutive_loss_stop': consecutive_loss_stop if consecutive_loss_stop > 0 else 99999999,
        'use_multiplier': use_multiplier,
        'loss_multiplier': loss_multiplier,
        'games_to_play': games_to_play,
        'games_to_rest': games_to_rest
    }
    with open('config_cdtd_ctool.txt','w+',encoding='utf-8') as f:
        json.dump(config, f, indent=4, ensure_ascii=False)
    return config

def top_100_cdtd():
    headers = {
        'accept': '*/*',
        'accept-language': 'vi,en;q=0.9',
        'origin': 'https://sprintrun.win',
        'priority': 'u=1, i',
        'referer': 'https://sprintrun.win/',
        'sec-ch-ua': '"Not)A;Brand";v="8", "Chromium";v="138", "Google Chrome";v="138"',
        'sec-ch-ua-mobile': '?1',
        'sec-ch-ua-platform': '"Android"',
        'sec-fetch-dest': 'empty',
        'sec-fetch-mode': 'cors',
        'sec-fetch-site': 'same-site',
        'user-agent': 'Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Mobile Safari/537.36',
    }
    try:
        response = requests.get('https://api.sprintrun.win/sprint/recent_100_issues', headers=headers).json()
        nv=[1,2,3,4,5,6]
        kq=[]
        for i in range(1,7):
            kq.append(response['data']['athlete_2_win_times'][str(i)])
        return nv,kq
    except Exception as e:
        prints(255,0,0,f'L·ªói khi l·∫•y top 100: {e}')
        time.sleep(5)
        return top_100_cdtd()

def top_10_cdtd(headers):
    params = ''
    try:
        response = requests.get('https://api.sprintrun.win/sprint/recent_10_issues', params=params, headers=headers).json()
        ki=[]
        kq=[]
        for i in response['data']['recent_10']:
            ki.append(i['issue_id'])
            kq.append(i['result'][0])
        return ki,kq
    except Exception as e:
        prints(255,0,0,f'L·ªói khi l·∫•y top 10: {e}')
        time.sleep(5)
        return top_10_cdtd(headers)

def print_data(data_top10_cdtd,data_top100_cdtd):
    prints(247, 255, 97,"‚ïê" * 47)
    prints(0, 255, 250,"D·ªÆ LI·ªÜU 10 V√ÅN G·∫¶N NH·∫§T:".center(50))
    for i in range(len(data_top10_cdtd[0])):
        prints(255,255,0,f'K√¨ {data_top10_cdtd[0][i]}: Ng∆∞·ªùi v·ªÅ nh·∫•t : {NV[int(data_top10_cdtd[1][i])]}')
    prints(247, 255, 97,"‚ïê" * 47)
    prints(0, 255, 250,"D·ªÆ LI·ªÜU 100 V√ÅN G·∫¶N NH·∫§T:".center(50))
    for i in range(6):
        prints(255,255,0,f'{NV[int(i+1)]} v·ªÅ nh·∫•t {data_top100_cdtd[1][int(i)]} l·∫ßn')
    prints(247, 255, 97,"‚ïê" * 47)

def selected_NV_enhanced(data_top100_cdtd):
    """
    Ch·ªçn ng·∫´u nhi√™n 3 nh√¢n v·∫≠t kh√°c nhau ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c.
    L·ª±a ch·ªçn n√†y ho√†n to√†n ng·∫´u nhi√™n v√† kh√¥ng d·ª±a v√†o t·ª∑ l·ªá th·∫Øng tr∆∞·ªõc ƒë√≥.
    """
    champions = list(range(1, 7))  # Danh s√°ch t·∫•t c·∫£ c√°c nh√¢n v·∫≠t t·ª´ 1 ƒë·∫øn 6
    # Ch·ªçn ng·∫´u nhi√™n 3 nh√¢n v·∫≠t kh√¥ng tr√πng l·∫∑p t·ª´ danh s√°ch.
    return random.sample(champions, 3)


def kiem_tra_kq_cdtd(headers, kqs_dat, ki):
    prints(0, 255, 37,f'ƒêang ƒë·ª£i k·∫øt qu·∫£ c·ªßa k√¨ #{ki}')
    start_time = time.time()
    while True:
        try:
            data_top10_cdtd = top_10_cdtd(headers)
            if int(data_top10_cdtd[0][0]) == int(ki):
                winner = int(data_top10_cdtd[1][0])
                prints(0, 255, 30,f'K·∫øt qu·∫£ c·ªßa k√¨ {ki}: Ng∆∞·ªùi v·ªÅ nh·∫•t l√† {NV[winner]}')
                if winner in kqs_dat:
                    prints(0, 255, 37,'XIN CH√öC M·ª™NG. B·∫†N ƒê√É TH·∫ÆNG!')
                    return True
                else:
                    prints(255, 0, 0,'B·∫†N ƒê√É THUA. CH√öC B·∫†N MAY M·∫ÆN L·∫¶N SAU!')
                    return False
            elapsed_time = time.time() - start_time
            prints(0, 255, 197,f'ƒêang ƒë·ª£i k·∫øt qu·∫£ {elapsed_time:.0f}s...', end='\r')
            time.sleep(1)
        except Exception as e:
            prints(255, 0, 0, f"L·ªói khi ki·ªÉm tra k·∫øt qu·∫£: {e}")
            time.sleep(5)


def user_asset(headers):
    try:
        json_data = {
            'user_id': int(headers['user-id']),
            'source': 'home',
        }
        response = requests.post('https://wallet.3games.io/api/wallet/user_asset', headers=headers, json=json_data).json()
        asset={
            'USDT':response['data']['user_asset']['USDT'],
            'WORLD':response['data']['user_asset']['WORLD'],
            'BUILD':response['data']['user_asset']['BUILD']
        }
        return asset
    except Exception as e:
        prints(255,0,0,f'L·ªói khi l·∫•y s·ªë d∆∞: {e}')
        time.sleep(5)
        return user_asset(headers)

def print_stats_cdtd(stats, headers, config):
    try:
        current_asset = user_asset(headers)
        profit = current_asset[config['Coin']] - stats['asset_0']
        
        prints(247, 255, 97,"‚ïê" * 47)
        prints(70, 240, 234,'Th·ªëng k√™:')
        prints(50, 237, 65,f"S·ªë tr·∫≠n th·∫Øng : {stats['win']}/{stats['win'] + stats['lose']}")
        
        win_rate = 0
        if stats['win'] + stats['lose'] > 0:
            win_rate = stats['win'] / (stats['lose'] + stats['win']) * 100
        prints(0, 255, 20, f'T·ªâ l·ªá th·∫Øng {win_rate:.2f}%')

        prints(255, 0, 0, f"Chu·ªói thua : {stats['consecutive_lose']} (T·ªëi ƒëa: {config['consecutive_loss_stop']})")
        
        if profit >= 0:
            prints(0, 255, 20, f"L√£i: {profit:.4f} {config['Coin']}")
        else:
            prints(255, 0, 0, f"L·ªó: {profit:.4f} {config['Coin']}")
        
        prints(255, 165, 0, f"M·ª©c c∆∞·ª£c hi·ªán t·∫°i: {config['current_coins']:.4f} {config['Coin']}")

        if config['games_to_play'] > 0:
            prints(100, 100, 255, f"S·ªë v√°n trong phi√™n: {stats['games_played']}/{config['games_to_play']}")
            if stats['games_to_skip'] > 0:
                prints(255, 255, 0, f"ƒêang ngh·ªâ, c√≤n l·∫°i {stats['games_to_skip']} v√°n.")

        prints(247, 255, 97,"‚ïê" * 47)
    except Exception as e:
        prints(255,0,0,f'L·ªói khi in th·ªëng k√™: {e}')

def print_wallet(asset):
    prints(247, 255, 97,"‚ïê" * 47)
    prints(238, 250, 7,'S·ªê D∆Ø C·ª¶A B·∫†N:')
    prints(23, 232, 159,f" USDT:{asset['USDT']:.4f}    WORLD:{asset['WORLD']:.4f}    BUILD:{asset['BUILD']:.4f}".center(50))
    prints(247, 255, 97,"‚ïê" * 47)

def bet_cdtd(headers, ki, config, selected_champions):
    prints(255,255,0,f"Chu·∫©n b·ªã ƒë·∫∑t c∆∞·ª£c cho k√¨ #{ki}:")
    for champion_id in selected_champions:
        try:
            json_data = {
                'issue_id': int(ki),
                'bet_group': 'winner',
                'asset_type': config['Coin'],
                'athlete_id': champion_id,
                'bet_amount': config['current_coins'],
            }
            response = requests.post('https://api.sprintrun.win/sprint/bet', headers=headers, json=json_data).json()
            if response.get('code') == 0 and response.get('msg') == 'ok':
                prints(0, 255, 19, f"    -> ƒê√£ ƒë·∫∑t {config['current_coins']} {config['Coin']} cho '{NV[champion_id]}' th√†nh c√¥ng.")
            else:
                prints(255, 0, 0, f"    -> L·ªói khi ƒë·∫∑t cho '{NV[champion_id]}': {response.get('msg', 'L·ªói kh√¥ng x√°c ƒë·ªãnh')}")
        except Exception as e:
            prints(255,0,0,f"    -> L·ªói nghi√™m tr·ªçng khi ƒë·∫∑t c∆∞·ª£c cho '{NV[champion_id]}': {e}")
        time.sleep(0.5) # Th√™m ƒë·ªô tr·ªÖ nh·ªè gi·ªØa c√°c l·∫ßn c∆∞·ª£c


def main_cdtd():
    banner("CH·∫†Y ƒêUA T·ªêC ƒê·ªò")
    data=load_data_cdtd()
    config=load_config_cdtd()

    headers = {
        'accept': '*/*',
        'accept-language': 'vi,en;q=0.9',
        'cache-control': 'no-cache',
        'country-code': 'vn',
        'origin': 'https://xworld.info',
        'pragma': 'no-cache',
        'priority': 'u=1, i',
        'referer': 'https://xworld.info/',
        'sec-ch-ua': '"Google Chrome";v="137", "Chromium";v="137", "Not/A)Brand";v="24"',
        'sec-ch-ua-mobile': '?1',
        'sec-ch-ua-platform': '"Android"',
        'sec-fetch-dest': 'empty',
        'sec-fetch-mode': 'cors',
        'sec-fetch-site': 'cross-site',
        'user-agent': 'Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Mobile Safari/537.36',
        'user-id': data['user-id'],
        'user-login': 'login_v2',
        'user-secret-key': data['user-secret-key'],
        'xb-language': 'vi-VN',
    }
    
    initial_asset = user_asset(headers)
    stats={
        'win': 0,
        'lose': 0,
        'consecutive_lose': 0,
        'asset_0': initial_asset[config['Coin']],
        'games_played': 0,
        'games_to_skip': 0,
    }

    while True:
        clear_screen()
        banner('CH·∫†Y ƒêUA T·ªêC ƒê·ªò')
        current_asset = user_asset(headers)
        print_wallet(current_asset)
        
        data_top10_cdtd = top_10_cdtd(headers)
        data_top100_cdtd = top_100_cdtd()
        print_data(data_top10_cdtd, data_top100_cdtd)
        
        print_stats_cdtd(stats, headers, config)

        # Ki·ªÉm tra ƒëi·ªÅu ki·ªán d·ª´ng
        profit = current_asset[config['Coin']] - stats['asset_0']
        if profit >= config['take_profit']:
            prints(0, 255, 0, f"ƒê√£ ƒë·∫°t m·ª•c ti√™u ch·ªët l·ªùi! D·ª´ng tool. L√£i: {profit:.4f} {config['Coin']}")
            break
        if -profit >= config['stop_loss']:
            prints(255, 0, 0, f"ƒê√£ ch·∫°m ng∆∞·ª°ng c·∫Øt l·ªó! D·ª´ng tool. L·ªó: {profit:.4f} {config['Coin']}")
            break
        if stats['consecutive_lose'] >= config['consecutive_loss_stop'] and config['consecutive_loss_stop'] > 0:
            prints(255, 0, 0, f"ƒê√£ thua {stats['consecutive_lose']} v√°n li√™n ti·∫øp! D·ª´ng tool.")
            break

        # Logic ngh·ªâ
        if stats['games_to_skip'] > 0:
            prints(255, 255, 0, f"V√°n n√†y ngh·ªâ, b·ªè qua ƒë·∫∑t c∆∞·ª£c. C√≤n l·∫°i {stats['games_to_skip']} v√°n ngh·ªâ.")
            stats['games_to_skip'] -= 1
            next_issue = data_top10_cdtd[0][0] + 1
            prints(100, 100, 255, f"ƒêang ch·ªù qua k√¨ #{next_issue}...")
            # ƒê·ª£i cho ƒë·∫øn khi k√¨ ti·∫øp theo k·∫øt th√∫c
            while True:
                latest_issue = top_10_cdtd(headers)[0][0]
                if latest_issue >= next_issue:
                    prints(0, 255, 0, f"K√¨ #{next_issue} ƒë√£ k·∫øt th√∫c. Chu·∫©n b·ªã cho v√°n ti·∫øp theo.")
                    break
                time.sleep(5)
            time.sleep(10)
            continue
            
        kqs_dat = selected_NV_enhanced(data_top100_cdtd)
        prints(247, 255, 97,"‚ïê" * 47)
        prints(0, 246, 255, f'BOT CH·ªåN ƒê·∫∂T QU√ÅN QU√ÇN: {", ".join([NV[kq] for kq in kqs_dat])}')
        prints(247, 255, 97,"‚ïê" * 47)
        
        next_ki = data_top10_cdtd[0][0] + 1
        bet_cdtd(headers, next_ki, config, kqs_dat)
        
        result = kiem_tra_kq_cdtd(headers, kqs_dat, next_ki)
        
        if result: # Th·∫Øng
            stats['win'] += 1
            stats['consecutive_lose'] = 0
            # Reset bet amount to initial on win
            config['current_coins'] = config['initial_coins']
        else: # Thua
            stats['lose'] += 1
            stats['consecutive_lose'] += 1
            # Multiply bet amount on loss if enabled
            if config['use_multiplier']:
                config['current_coins'] *= config['loss_multiplier']
        
        stats['games_played'] += 1

        # Logic b·∫Øt ƒë·∫ßu ngh·ªâ
        if config['games_to_play'] > 0 and stats['games_played'] >= config['games_to_play']:
            prints(255, 165, 0, f"ƒê√£ ch∆°i {stats['games_played']} v√°n. B·∫Øt ƒë·∫ßu ngh·ªâ {config['games_to_rest']} v√°n.")
            stats['games_to_skip'] = config['games_to_rest']
            stats['games_played'] = 0

        time.sleep(10)

if __name__ == "__main__":
    try:
        main_cdtd()
    except KeyboardInterrupt:
        prints(255, 0, 0, "\nƒê√£ d·ª´ng tool theo y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng.")
